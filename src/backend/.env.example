# STONESOUP Environment Variables Template
# ==========================================
# This file documents all environment variables used by STONESOUP.
# Copy this file to .env and populate with your actual values.
#
# SECURITY WARNING: Never commit .env files with real credentials!
# The .env file should be in .gitignore.
#
# Learning Note: Environment Variables
# ====================================
# Environment variables allow us to configure the application without
# hardcoding sensitive data. They're loaded at runtime, making it easy
# to have different configs for development, staging, and production.
#
# In Python: os.environ.get("VARIABLE_NAME")
# In Next.js: process.env.VARIABLE_NAME (NEXT_PUBLIC_ prefix for client-side)

# ===========================================
# DATABASE (PostgreSQL with pgvector)
# ===========================================
# PostgreSQL connection string with pgvector extension for similarity search
# Format: postgresql://username:password@host:port/database?sslmode=require
#
# Learning Note: The sslmode=require ensures encrypted connections in production.
# Railway auto-configures this when deployed.
DATABASE_URL=postgresql://user:password@localhost:5432/stonesoup_dev?sslmode=prefer

# Version of pgvector extension (for compatibility checking)
PGVECTOR_EXTENSION_VERSION=0.5.1

# ===========================================
# REDIS (Optional for MVP)
# ===========================================
# Redis is used for caching and background jobs (postponed for MVP)
# Format: redis://username:password@host:port/database_number
REDIS_URL=redis://localhost:6379/0

# ===========================================
# AUTHENTICATION (Clerk)
# ===========================================
# Clerk provides managed authentication with minimal setup
# Get these from: https://dashboard.clerk.com

# Backend API key for server-side operations (keep secret!)
CLERK_SECRET_KEY=sk_test_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

# Frontend publishable key (safe to expose in client code)
CLERK_PUBLISHABLE_KEY=pk_test_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

# Next.js specific Clerk configuration
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/dashboard
NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/onboarding

# JWT verification key (optional, for advanced JWT validation)
CLERK_JWT_VERIFICATION_KEY=

# ===========================================
# AI SERVICES (OpenRouter)
# ===========================================
# OpenRouter provides unified access to multiple AI models
# Get your API key from: https://openrouter.ai/keys
OPENROUTER_API_KEY=sk-or-v1-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

# ===========================================
# ERROR MONITORING (Sentry)
# ===========================================
# Sentry tracks errors in production
# Get your DSN from: https://sentry.io/settings/YOUR_ORG/projects/YOUR_PROJECT/keys/

# Backend error tracking
SENTRY_DSN=https://XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX@oXXXXXXXXXX.ingest.sentry.io/XXXXXXXXXXXXX
SENTRY_ENVIRONMENT=development
SENTRY_TRACES_SAMPLE_RATE=0.1  # 10% of requests traced (adjust for cost)
SENTRY_PROFILES_SAMPLE_RATE=0.1

# Frontend error tracking (same DSN, different context)
NEXT_PUBLIC_SENTRY_DSN=https://XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX@oXXXXXXXXXX.ingest.sentry.io/XXXXXXXXXXXXX
NEXT_PUBLIC_SENTRY_ENVIRONMENT=development

# ===========================================
# DEPLOYMENT (Railway)
# ===========================================
# Railway provides hosting with automatic deployments
# Get these from Railway dashboard: https://railway.app

# API token for Railway CLI and auto-configuration
RAILWAY_TOKEN=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX

# Project and environment identifiers
RAILWAY_PROJECT_ID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
RAILWAY_ENVIRONMENT=production

# ===========================================
# APPLICATION SETTINGS
# ===========================================
# General environment configuration
ENVIRONMENT=development  # development, staging, production
NODE_ENV=development     # For Next.js optimizations
PYTHON_ENV=development   # For Python optimizations

# API Configuration
API_BASE_URL=http://localhost:8000
NEXT_PUBLIC_API_BASE_URL=http://localhost:8000
CORS_ORIGINS=http://localhost:3000,http://localhost:3001

# Security (generate a strong secret for production!)
# Python: secrets.token_urlsafe(32)
JWT_SECRET_KEY=your-super-secret-jwt-key-change-this-in-production
JWT_ALGORITHM=HS256
JWT_EXPIRATION_MINUTES=60

# Rate Limiting (adjust based on expected traffic)
RATE_LIMIT_REQUESTS_PER_MINUTE=60
RATE_LIMIT_REQUESTS_PER_HOUR=1000

# ===========================================
# AI CONFIGURATION
# ===========================================
# Learning Note: These thresholds determine AI behavior
# Lower confidence = more human review needed
# Higher thresholds = more conservative system

# Confidence Thresholds
MIN_CONFIDENCE_SCORE=0.7      # Below this, content is flagged
AUTO_APPROVE_CONFIDENCE=0.9   # Above this, no review needed

# Vector Search Configuration
VECTOR_DIMENSION=1536         # OpenAI text-embedding-3-small output size
MAX_SEARCH_RESULTS=50         # Maximum results to return
SIMILARITY_THRESHOLD=0.8      # Minimum similarity score (0-1)

# Token Limits (to control AI costs)
MAX_TOKENS_PER_REQUEST=4000   # ~3000 words
MAX_CONTEXT_LENGTH=128000     # Gemini Pro 1.5 context window

# ===========================================
# FEATURE FLAGS (for gradual rollout)
# ===========================================
ENABLE_AI_PIPELINE=true       # Use AI for processing
ENABLE_HUMAN_REVIEW=true      # Require review for low confidence
ENABLE_AUTO_TAGGING=true      # Auto-generate tags from content
ENABLE_STORY_GENERATION=true  # Generate narrative summaries

# ===========================================
# LOGGING
# ===========================================
LOG_LEVEL=INFO               # DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_FORMAT=json              # json or text
ENABLE_SQL_LOGGING=false     # Set true to debug queries (verbose!)

# ===========================================
# DEVELOPMENT TOOLS
# ===========================================
# Hot reload configuration
WATCHPACK_POLLING=true       # For Docker environments
CHOKIDAR_USEPOLLING=true     # For file watching in containers

# Python optimizations
DEBUG=false                  # Set true for detailed errors
PYTHONDONTWRITEBYTECODE=1    # Don't create .pyc files
PYTHONUNBUFFERED=1           # Don't buffer stdout/stderr

# ===========================================
# MULTI-TENANCY (simplified for MVP)
# ===========================================
DEFAULT_CAULDRON_ID=10ksb-pilot    # Hardcoded for MVP
MAX_CAULDRONS_PER_USER=5           # Future use

# ===========================================
# OPTIONAL SERVICES (not needed for MVP)
# ===========================================
# These are documented for future implementation

# LangChain/LangGraph (postponed - using direct AI calls for MVP)
LANGCHAIN_API_KEY=
LANGCHAIN_TRACING_V2=true
LANGCHAIN_PROJECT=stonesoup
LANGCHAIN_ENDPOINT=https://api.smith.langchain.com

# Email notifications (postponed for MVP)
SMTP_HOST=
SMTP_PORT=587
SMTP_USER=
SMTP_PASSWORD=
FROM_EMAIL=noreply@stonesoup.ai

# Analytics (postponed for MVP)
POSTHOG_API_KEY=
NEXT_PUBLIC_POSTHOG_KEY=
NEXT_PUBLIC_POSTHOG_HOST=https://app.posthog.com

# File storage (postponed for MVP)
S3_ACCESS_KEY_ID=
S3_SECRET_ACCESS_KEY=
S3_BUCKET_NAME=stonesoup-uploads
S3_REGION=us-east-1
S3_ENDPOINT_URL=

# ===========================================
# TESTING
# ===========================================
# Separate database for tests (to avoid corrupting dev data)
TEST_DATABASE_URL=postgresql://test:test@localhost:5432/stonesoup_test
TEST_REDIS_URL=redis://localhost:6379/1
PYTEST_WORKERS=auto  # Number of parallel test workers

# ===========================================
# QUICK START CHECKLIST
# ===========================================
# For MVP, you minimally need:
# 1. [ ] DATABASE_URL - PostgreSQL connection
# 2. [ ] CLERK_SECRET_KEY - Backend auth
# 3. [ ] CLERK_PUBLISHABLE_KEY - Frontend auth  
# 4. [ ] OPENROUTER_API_KEY - AI capabilities
# 5. [ ] SENTRY_DSN - Error tracking (optional but recommended)
#
# Everything else can use defaults for local development!